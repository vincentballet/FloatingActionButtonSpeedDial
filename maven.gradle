/*
 * Copyright 2019 Roberto Leinardi.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def isMavenAvailable = false
try {
    "mvn -version".execute().waitFor() // Check if Maven binary is available
    isMavenAvailable = true
} catch (IOException ignore) {
    logger.warn("Maven binary not available, pubishing to Bintray not possible.")
}

if (isMavenAvailable) {
    apply plugin: 'com.github.dcendents.android-maven'

    install {
        repositories.mavenInstaller.pom.project {
            name mvn_config.artifact_id
            description mvn_config.description
            url mvn_config.website
            inceptionYear mvn_config.inception_year

            packaging 'aar'
            groupId mvn_config.group_id
            artifactId mvn_config.artifact_id
            version mvn_config.version

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection mvn_config.vcs_url
                url mvn_config.website

            }
            developers {
                developer {
                    name "Roberto Leinardi"
                    email "roberto@leinardi.com"
                }
            }
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    afterEvaluate {
        javadoc.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
    }

    apply from: rootProject.file('bintray.gradle')
}
